#include <array>
#include <amici/defines.h>

namespace amici {

namespace model_icg_sd {

std::array<const char*, 35> parameterNames = {
    "volume conversion factor", // p[0]
"volume conversion factor", // p[1]
"body weight [kg]", // p[2]
"height [cm]", // p[3]
"cardiac output per bodyweight [ml/s/kg]", // p[4]
"blood fraction of organ volume", // p[5]
"hematocrit", // p[6]
"fractional tissue volume gastrointestinal tract", // p[7]
"fractional tissue volume bile", // p[8]
"fractional tissue volume liver", // p[9]
"fractional tissue volume lung", // p[10]
"fractional tissue volume venous", // p[11]
"fractional tissue volume arterial", // p[12]
"fractional tissue volume portal", // p[13]
"fractional tissue volume hepatic venous", // p[14]
"gastrointestinal tract fractional tissue blood flow", // p[15]
"hepatic (venous side) fractional tissue blood flow", // p[16]
"lung fractional tissue blood flow", // p[17]
"severity of cirrhosis [0, 0.95]", // p[18]
"fraction of portal venous blood shunted by the liver", // p[19]
"fraction of lost parenchymal liver volume", // p[20]
"fractional change of hepatic blood flow", // p[21]
"fractional change of cardiac output", // p[22]
"fractional blood flow change due to exercise", // p[23]
"resection rate", // p[24]
"Molecular weight icg [g/mole]", // p[25]
"injection time icg [s]", // p[26]
"Ri [mg/min] rate of infusion icg", // p[27]
"Vmax for icg import", // p[28]
"Km icg of icg import", // p[29]
"Ki bilirubin of icg import", // p[30]
"scaling factor protein amount", // p[31]
"Vmax bile export icg", // p[32]
"Km bile export icg", // p[33]
"Vmax bile transport icg", // p[34]
};

std::array<const char*, 0> fixedParameterNames = {
    
};

std::array<const char*, 14> stateNames = {
    "icg (rest)", // x_rdata[0]
"icg (gastrointestinal tract)", // x_rdata[1]
"icg (liver)", // x_rdata[2]
"icg (lung)", // x_rdata[3]
"icg (venous plasma)", // x_rdata[4]
"icg (arterial plasma)", // x_rdata[5]
"icg (portal vein)", // x_rdata[6]
"icg (hepatic vein)", // x_rdata[7]
"icg (feces)", // x_rdata[8]
"bilirubin (extern)", // x_rdata[9]
"icg (liver)", // x_rdata[10]
"icg (bile)", // x_rdata[11]
"IV bolus dose icg [mg]", // x_rdata[12]
"Cumulative dose due to infusion icg", // x_rdata[13]
};

std::array<const char*, 70> observableNames = {
    "icg (rest)", // y[0]
"icg (gastrointestinal tract)", // y[1]
"icg (liver)", // y[2]
"icg (lung)", // y[3]
"icg (venous plasma)", // y[4]
"icg (arterial plasma)", // y[5]
"icg (portal vein)", // y[6]
"icg (hepatic vein)", // y[7]
"icg (feces)", // y[8]
"bilirubin (extern)", // y[9]
"icg (liver)", // y[10]
"icg (bile)", // y[11]
"IV bolus dose icg [mg]", // y[12]
"Cumulative dose due to infusion icg", // y[13]
"FVre", // y[14]
"FQre", // y[15]
"BSA", // y[16]
"CO", // y[17]
"QC", // y[18]
"Qlu", // y[19]
"Qre", // y[20]
"Qh", // y[21]
"Qgi", // y[22]
"Qpo", // y[23]
"Qha", // y[24]
"Ki_icg", // y[25]
"Are_plasma_icg", // y[26]
"Xre_plasma_icg", // y[27]
"Mre_plasma_icg", // y[28]
"Agi_plasma_icg", // y[29]
"Xgi_plasma_icg", // y[30]
"Mgi_plasma_icg", // y[31]
"Ali_plasma_icg", // y[32]
"Xli_plasma_icg", // y[33]
"Mli_plasma_icg", // y[34]
"Alu_plasma_icg", // y[35]
"Xlu_plasma_icg", // y[36]
"Mlu_plasma_icg", // y[37]
"Ave_icg", // y[38]
"Xve_icg", // y[39]
"Mve_icg", // y[40]
"Aar_icg", // y[41]
"Xar_icg", // y[42]
"Mar_icg", // y[43]
"Apo_icg", // y[44]
"Xpo_icg", // y[45]
"Mpo_icg", // y[46]
"Ahv_icg", // y[47]
"Xhv_icg", // y[48]
"Mhv_icg", // y[49]
"ER_icg", // y[50]
"CLinfusion_icg", // y[51]
"Vbi", // y[52]
"Vgi", // y[53]
"Vli", // y[54]
"Vlu", // y[55]
"Vre", // y[56]
"Vve", // y[57]
"Var", // y[58]
"Vpo", // y[59]
"Vhv", // y[60]
"Vre_plasma", // y[61]
"Vre_tissue", // y[62]
"Vgi_plasma", // y[63]
"Vgi_tissue", // y[64]
"Vli_plasma", // y[65]
"Vli_tissue", // y[66]
"Vlu_plasma", // y[67]
"Vlu_tissue", // y[68]
"Vfeces", // y[69]
};

std::array<const ObservableScaling, 70> observableScalings = {
    ObservableScaling::lin, // y[0]
ObservableScaling::lin, // y[1]
ObservableScaling::lin, // y[2]
ObservableScaling::lin, // y[3]
ObservableScaling::lin, // y[4]
ObservableScaling::lin, // y[5]
ObservableScaling::lin, // y[6]
ObservableScaling::lin, // y[7]
ObservableScaling::lin, // y[8]
ObservableScaling::lin, // y[9]
ObservableScaling::lin, // y[10]
ObservableScaling::lin, // y[11]
ObservableScaling::lin, // y[12]
ObservableScaling::lin, // y[13]
ObservableScaling::lin, // y[14]
ObservableScaling::lin, // y[15]
ObservableScaling::lin, // y[16]
ObservableScaling::lin, // y[17]
ObservableScaling::lin, // y[18]
ObservableScaling::lin, // y[19]
ObservableScaling::lin, // y[20]
ObservableScaling::lin, // y[21]
ObservableScaling::lin, // y[22]
ObservableScaling::lin, // y[23]
ObservableScaling::lin, // y[24]
ObservableScaling::lin, // y[25]
ObservableScaling::lin, // y[26]
ObservableScaling::lin, // y[27]
ObservableScaling::lin, // y[28]
ObservableScaling::lin, // y[29]
ObservableScaling::lin, // y[30]
ObservableScaling::lin, // y[31]
ObservableScaling::lin, // y[32]
ObservableScaling::lin, // y[33]
ObservableScaling::lin, // y[34]
ObservableScaling::lin, // y[35]
ObservableScaling::lin, // y[36]
ObservableScaling::lin, // y[37]
ObservableScaling::lin, // y[38]
ObservableScaling::lin, // y[39]
ObservableScaling::lin, // y[40]
ObservableScaling::lin, // y[41]
ObservableScaling::lin, // y[42]
ObservableScaling::lin, // y[43]
ObservableScaling::lin, // y[44]
ObservableScaling::lin, // y[45]
ObservableScaling::lin, // y[46]
ObservableScaling::lin, // y[47]
ObservableScaling::lin, // y[48]
ObservableScaling::lin, // y[49]
ObservableScaling::lin, // y[50]
ObservableScaling::lin, // y[51]
ObservableScaling::lin, // y[52]
ObservableScaling::lin, // y[53]
ObservableScaling::lin, // y[54]
ObservableScaling::lin, // y[55]
ObservableScaling::lin, // y[56]
ObservableScaling::lin, // y[57]
ObservableScaling::lin, // y[58]
ObservableScaling::lin, // y[59]
ObservableScaling::lin, // y[60]
ObservableScaling::lin, // y[61]
ObservableScaling::lin, // y[62]
ObservableScaling::lin, // y[63]
ObservableScaling::lin, // y[64]
ObservableScaling::lin, // y[65]
ObservableScaling::lin, // y[66]
ObservableScaling::lin, // y[67]
ObservableScaling::lin, // y[68]
ObservableScaling::lin, // y[69]
};

std::array<const char*, 72> expressionNames = {
    "LI__bil_ext", // w[0]
"BSA", // w[1]
"CLinfusion_icg", // w[2]
"CO", // w[3]
"ER_icg", // w[4]
"FVre", // w[5]
"Ki_icg", // w[6]
"Var", // w[7]
"Vbi", // w[8]
"Vgi", // w[9]
"Vhv", // w[10]
"Vli", // w[11]
"Vlu", // w[12]
"Vpo", // w[13]
"Vve", // w[14]
"Aar_icg", // w[15]
"Ahv_icg", // w[16]
"Apo_icg", // w[17]
"Ave_icg", // w[18]
"QC", // w[19]
"Vgi_plasma", // w[20]
"Vgi_tissue", // w[21]
"Vli_plasma", // w[22]
"Vli_tissue", // w[23]
"Vlu_plasma", // w[24]
"Vlu_tissue", // w[25]
"Vre", // w[26]
"Agi_plasma_icg", // w[27]
"Ali_plasma_icg", // w[28]
"Alu_plasma_icg", // w[29]
"Mar_icg", // w[30]
"Mhv_icg", // w[31]
"Mpo_icg", // w[32]
"Mve_icg", // w[33]
"Qgi", // w[34]
"Qh", // w[35]
"Qlu", // w[36]
"Vre_plasma", // w[37]
"Vre_tissue", // w[38]
"Xar_icg", // w[39]
"Xhv_icg", // w[40]
"Xpo_icg", // w[41]
"Xve_icg", // w[42]
"Are_plasma_icg", // w[43]
"FQre", // w[44]
"Mgi_plasma_icg", // w[45]
"Mli_plasma_icg", // w[46]
"Mlu_plasma_icg", // w[47]
"Qpo", // w[48]
"Xgi_plasma_icg", // w[49]
"Xli_plasma_icg", // w[50]
"Xlu_plasma_icg", // w[51]
"Mre_plasma_icg", // w[52]
"Qha", // w[53]
"Qre", // w[54]
"Xre_plasma_icg", // w[55]
"flux_iv_icg", // w[56]
"flux_Flow_ar_arre_icg", // w[57]
"flux_Flow_re_ve_icg", // w[58]
"flux_Flow_ar_argi_icg", // w[59]
"flux_Flow_gi_po_icg", // w[60]
"flux_Flow_arli_li_icg", // w[61]
"flux_Flow_arli_hv_icg", // w[62]
"flux_Flow_po_li_icg", // w[63]
"flux_Flow_po_hv_icg", // w[64]
"flux_Flow_li_hv_icg", // w[65]
"flux_Flow_hv_ve_icg", // w[66]
"flux_Flow_ve_lu_icg", // w[67]
"flux_Flow_lu_ar_icg", // w[68]
"flux_LI__ICGIM", // w[69]
"flux_LI__ICGLI2CA", // w[70]
"flux_LI__ICGLI2BI", // w[71]
};

std::array<const char*, 35> parameterIds = {
    "conversion_ml_per_l", // p[0]
"conversion_l_per_ml", // p[1]
"BW", // p[2]
"HEIGHT", // p[3]
"COBW", // p[4]
"Fblood", // p[5]
"HCT", // p[6]
"FVgi", // p[7]
"FVbi", // p[8]
"FVli", // p[9]
"FVlu", // p[10]
"FVve", // p[11]
"FVar", // p[12]
"FVpo", // p[13]
"FVhv", // p[14]
"FQgi", // p[15]
"FQh", // p[16]
"FQlu", // p[17]
"f_cirrhosis", // p[18]
"f_shunts", // p[19]
"f_tissue_loss", // p[20]
"f_bloodflow", // p[21]
"f_cardiac_output", // p[22]
"f_exercise", // p[23]
"resection_rate", // p[24]
"Mr_icg", // p[25]
"ti_icg", // p[26]
"Ri_icg", // p[27]
"LI__ICGIM_Vmax", // p[28]
"LI__ICGIM_Km", // p[29]
"LI__ICGIM_ki_bil", // p[30]
"LI__f_oatp1b3", // p[31]
"LI__ICGLI2CA_Vmax", // p[32]
"LI__ICGLI2CA_Km", // p[33]
"LI__ICGLI2BI_Vmax", // p[34]
};

std::array<const char*, 0> fixedParameterIds = {
    
};

std::array<const char*, 14> stateIds = {
    "Cre_plasma_icg", // x_rdata[0]
"Cgi_plasma_icg", // x_rdata[1]
"Cli_plasma_icg", // x_rdata[2]
"Clu_plasma_icg", // x_rdata[3]
"Cve_icg", // x_rdata[4]
"Car_icg", // x_rdata[5]
"Cpo_icg", // x_rdata[6]
"Chv_icg", // x_rdata[7]
"Afeces_icg", // x_rdata[8]
"LI__bil_ext", // x_rdata[9]
"LI__icg", // x_rdata[10]
"LI__icg_bi", // x_rdata[11]
"IVDOSE_icg", // x_rdata[12]
"cum_dose_icg", // x_rdata[13]
};

std::array<const char*, 70> observableIds = {
    "yCre_plasma_icg", // y[0]
"yCgi_plasma_icg", // y[1]
"yCli_plasma_icg", // y[2]
"yClu_plasma_icg", // y[3]
"yCve_icg", // y[4]
"yCar_icg", // y[5]
"yCpo_icg", // y[6]
"yChv_icg", // y[7]
"yAfeces_icg", // y[8]
"yLI__bil_ext", // y[9]
"yLI__icg", // y[10]
"yLI__icg_bi", // y[11]
"yIVDOSE_icg", // y[12]
"ycum_dose_icg", // y[13]
"yFVre", // y[14]
"yFQre", // y[15]
"yBSA", // y[16]
"yCO", // y[17]
"yQC", // y[18]
"yQlu", // y[19]
"yQre", // y[20]
"yQh", // y[21]
"yQgi", // y[22]
"yQpo", // y[23]
"yQha", // y[24]
"yKi_icg", // y[25]
"yAre_plasma_icg", // y[26]
"yXre_plasma_icg", // y[27]
"yMre_plasma_icg", // y[28]
"yAgi_plasma_icg", // y[29]
"yXgi_plasma_icg", // y[30]
"yMgi_plasma_icg", // y[31]
"yAli_plasma_icg", // y[32]
"yXli_plasma_icg", // y[33]
"yMli_plasma_icg", // y[34]
"yAlu_plasma_icg", // y[35]
"yXlu_plasma_icg", // y[36]
"yMlu_plasma_icg", // y[37]
"yAve_icg", // y[38]
"yXve_icg", // y[39]
"yMve_icg", // y[40]
"yAar_icg", // y[41]
"yXar_icg", // y[42]
"yMar_icg", // y[43]
"yApo_icg", // y[44]
"yXpo_icg", // y[45]
"yMpo_icg", // y[46]
"yAhv_icg", // y[47]
"yXhv_icg", // y[48]
"yMhv_icg", // y[49]
"yER_icg", // y[50]
"yCLinfusion_icg", // y[51]
"yVbi", // y[52]
"yVgi", // y[53]
"yVli", // y[54]
"yVlu", // y[55]
"yVre", // y[56]
"yVve", // y[57]
"yVar", // y[58]
"yVpo", // y[59]
"yVhv", // y[60]
"yVre_plasma", // y[61]
"yVre_tissue", // y[62]
"yVgi_plasma", // y[63]
"yVgi_tissue", // y[64]
"yVli_plasma", // y[65]
"yVli_tissue", // y[66]
"yVlu_plasma", // y[67]
"yVlu_tissue", // y[68]
"yVfeces", // y[69]
};

std::array<const char*, 72> expressionIds = {
    "LI__bil_ext", // w[0]
"BSA", // w[1]
"CLinfusion_icg", // w[2]
"CO", // w[3]
"ER_icg", // w[4]
"FVre", // w[5]
"Ki_icg", // w[6]
"Var", // w[7]
"Vbi", // w[8]
"Vgi", // w[9]
"Vhv", // w[10]
"Vli", // w[11]
"Vlu", // w[12]
"Vpo", // w[13]
"Vve", // w[14]
"Aar_icg", // w[15]
"Ahv_icg", // w[16]
"Apo_icg", // w[17]
"Ave_icg", // w[18]
"QC", // w[19]
"Vgi_plasma", // w[20]
"Vgi_tissue", // w[21]
"Vli_plasma", // w[22]
"Vli_tissue", // w[23]
"Vlu_plasma", // w[24]
"Vlu_tissue", // w[25]
"Vre", // w[26]
"Agi_plasma_icg", // w[27]
"Ali_plasma_icg", // w[28]
"Alu_plasma_icg", // w[29]
"Mar_icg", // w[30]
"Mhv_icg", // w[31]
"Mpo_icg", // w[32]
"Mve_icg", // w[33]
"Qgi", // w[34]
"Qh", // w[35]
"Qlu", // w[36]
"Vre_plasma", // w[37]
"Vre_tissue", // w[38]
"Xar_icg", // w[39]
"Xhv_icg", // w[40]
"Xpo_icg", // w[41]
"Xve_icg", // w[42]
"Are_plasma_icg", // w[43]
"FQre", // w[44]
"Mgi_plasma_icg", // w[45]
"Mli_plasma_icg", // w[46]
"Mlu_plasma_icg", // w[47]
"Qpo", // w[48]
"Xgi_plasma_icg", // w[49]
"Xli_plasma_icg", // w[50]
"Xlu_plasma_icg", // w[51]
"Mre_plasma_icg", // w[52]
"Qha", // w[53]
"Qre", // w[54]
"Xre_plasma_icg", // w[55]
"flux_iv_icg", // w[56]
"flux_Flow_ar_arre_icg", // w[57]
"flux_Flow_re_ve_icg", // w[58]
"flux_Flow_ar_argi_icg", // w[59]
"flux_Flow_gi_po_icg", // w[60]
"flux_Flow_arli_li_icg", // w[61]
"flux_Flow_arli_hv_icg", // w[62]
"flux_Flow_po_li_icg", // w[63]
"flux_Flow_po_hv_icg", // w[64]
"flux_Flow_li_hv_icg", // w[65]
"flux_Flow_hv_ve_icg", // w[66]
"flux_Flow_ve_lu_icg", // w[67]
"flux_Flow_lu_ar_icg", // w[68]
"flux_LI__ICGIM", // w[69]
"flux_LI__ICGLI2CA", // w[70]
"flux_LI__ICGLI2BI", // w[71]
};

std::array<int, 13> stateIdxsSolver = {
    0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13
};

std::array<bool, 0> rootInitialValues = {
    
};

} // namespace model_icg_sd

} // namespace amici
